package com.alphasta.model.RowMapper;

import com.alphasta.model.TrafficVehiclePass;
import com.spring4all.spring.boot.starter.hbase.api.RowMapper;
import org.apache.hadoop.hbase.client.Result;
import org.apache.hadoop.hbase.util.Bytes;

public class TrafficVehiclePassRowMapper implements RowMapper<TrafficVehiclePass> {

    private static byte[] COLUMNFAMILY = "cf1".getBytes();
    private static byte[] rowkey = "rowkey".getBytes();
    private static byte[] PASS_ID = "PASS_ID".getBytes();
    private static byte[] CROSSING_ID = "CROSSING_ID".getBytes();
    private static byte[] LANE_NO = "LANE_NO".getBytes();
    private static byte[] DIRECTION_INDEX = "DIRECTION_INDEX".getBytes();
    private static byte[] PLATE_NO = "PLATE_NO".getBytes();
    private static byte[] PLATE_TYPE = "PLATE_TYPE".getBytes();
    private static byte[] PASS_TIME = "PASS_TIME".getBytes();
    private static byte[] VEHICLE_SPEED = "VEHICLE_SPEED".getBytes();
    private static byte[] VEHICLE_LEN = "VEHICLE_LEN".getBytes();
    private static byte[] PLATE_COLOR = "PLATE_COLOR".getBytes();
    private static byte[] VEHICLE_COLOR = "VEHICLE_COLOR".getBytes();
    private static byte[] VEHICLE_TYPE = "VEHICLE_TYPE".getBytes();
    private static byte[] VEHICLE_COLOR_DEPTH = "VEHICLE_COLOR_DEPTH".getBytes();
    private static byte[] PLATE_STATE = "PLATE_STATE".getBytes();
    private static byte[] IMAGE_PATH = "IMAGE_PATH".getBytes();
    private static byte[] PLATE_IMAGE_PATH = "PLATE_IMAGE_PATH".getBytes();
    private static byte[] TFS_ID = "TFS_ID".getBytes();
    private static byte[] VEHICLE_STATE = "VEHICLE_STATE".getBytes();
    private static byte[] RES_NUM1 = "RES_NUM1".getBytes();
    private static byte[] RES_NUM2 = "RES_NUM2".getBytes();
    private static byte[] RES_STR3 = "RES_STR3".getBytes();
    private static byte[] RES_STR4 = "RES_STR4".getBytes();
    private static byte[] VEHICLE_INFO_LEVEL = "VEHICLE_INFO_LEVEL".getBytes();
    private static byte[] VEHICLE_LOGO = "VEHICLE_LOGO".getBytes();
    private static byte[] VEHICLE_SUBLOGO = "VEHICLE_SUBLOGO".getBytes();
    private static byte[] VEHICLE_MODEL = "VEHICLE_MODEL".getBytes();
    private static byte[] PILOTSUNVISOR = "PILOTSUNVISOR".getBytes();
    private static byte[] VICE_PILOTSUNVISOR = "VICE_PILOTSUNVISOR".getBytes();
    private static byte[] USE_PHONE = "USE_PHONE".getBytes();
    private static byte[] VICE_PILOTSAFEBELT = "VICE_PILOTSAFEBELT".getBytes();
    private static byte[] PENDANT_NUM = "PENDANT_NUM".getBytes();
    private static byte[] DANGEROUS_NUM = "DANGEROUS_NUM".getBytes();
    private static byte[] YELLOWCAR_NUM = "YELLOWCAR_NUM".getBytes();
    private static byte[] PILOTSAFEBELT = "PILOTSAFEBELT".getBytes();
    private static byte[] CREATETIME = "CREATETIME".getBytes();
    private static byte[] PDVS = "PDVS".getBytes();
    private static byte[] VEHICLE_SIGN = "VEHICLE_SIGN".getBytes();
    private static byte[] TEMP_PLATE = "TEMP_PLATE".getBytes();
    private static byte[] PLATE_DIFF = "PLATE_DIFF".getBytes();
    private static byte[] VEHICLE_RECT = "VEHICLE_RECT".getBytes();
    private static byte[] PILOT_RECT = "PILOT_RECT".getBytes();
    private static byte[] COPILOT_RECT = "COPILOT_RECT".getBytes();
    private static byte[] PDVS_RECT = "PDVS_RECT".getBytes();
    private static byte[] PLATEPOS_RECT = "PLATEPOS_RECT".getBytes();
    private static byte[] AUDIT_STATUS = "AUDIT_STATUS".getBytes();
    private static byte[] PLATENOENTIREBELIEVE = "PLATENOENTIREBELIEVE".getBytes();
    private static byte[] PLATENOBELIVEDETAIL = "PLATENOBELIVEDETAIL".getBytes();
    private static byte[] LABEL = "LABEL".getBytes();
    private static byte[] FRONT_CHILD = "FRONT_CHILD".getBytes();
    private static byte[] TISSUE_BOX = "TISSUE_BOX".getBytes();
    private static byte[] DECORATION = "DECORATION".getBytes();
    private static byte[] SIMILARITY = "SIMILARITY".getBytes();

    @Override
    public TrafficVehiclePass mapRow(Result result, int i) throws Exception {
        TrafficVehiclePass trafficVehiclePass = new TrafficVehiclePass();
        trafficVehiclePass.setRowkey(Bytes.toString(result.getValue(COLUMNFAMILY,rowkey)));
        trafficVehiclePass.setPASS_ID(Bytes.toString(result.getValue(COLUMNFAMILY,PASS_ID)));
        trafficVehiclePass.setCROSSING_ID(Bytes.toString(result.getValue(COLUMNFAMILY,CROSSING_ID)));
        trafficVehiclePass.setLANE_NO(Bytes.toString(result.getValue(COLUMNFAMILY,LANE_NO)));
        trafficVehiclePass.setDIRECTION_INDEX(Bytes.toString(result.getValue(COLUMNFAMILY,DIRECTION_INDEX)));
        trafficVehiclePass.setPLATE_NO(Bytes.toString(result.getValue(COLUMNFAMILY,PLATE_NO)));
        trafficVehiclePass.setPASS_TIME(Bytes.toString(result.getValue(COLUMNFAMILY,PASS_TIME)));
        trafficVehiclePass.setPLATE_TYPE(Bytes.toString(result.getValue(COLUMNFAMILY,PLATE_TYPE)));
        trafficVehiclePass.setVEHICLE_SPEED(Bytes.toString(result.getValue(COLUMNFAMILY,VEHICLE_SPEED)));
        trafficVehiclePass.setVEHICLE_LEN(Bytes.toString(result.getValue(COLUMNFAMILY,VEHICLE_LEN)));
        trafficVehiclePass.setPLATE_COLOR(Bytes.toString(result.getValue(COLUMNFAMILY,PLATE_COLOR)));
        trafficVehiclePass.setVEHICLE_COLOR(Bytes.toString(result.getValue(COLUMNFAMILY,VEHICLE_COLOR)));
        trafficVehiclePass.setVEHICLE_TYPE(Bytes.toString(result.getValue(COLUMNFAMILY,VEHICLE_TYPE)));
        trafficVehiclePass.setVEHICLE_COLOR_DEPTH(Bytes.toString(result.getValue(COLUMNFAMILY,VEHICLE_COLOR_DEPTH)));
        trafficVehiclePass.setPLATE_STATE(Bytes.toString(result.getValue(COLUMNFAMILY,PLATE_STATE)));
        trafficVehiclePass.setIMAGE_PATH(Bytes.toString(result.getValue(COLUMNFAMILY,IMAGE_PATH)));
        trafficVehiclePass.setPLATE_IMAGE_PATH(Bytes.toString(result.getValue(COLUMNFAMILY,PLATE_IMAGE_PATH)));
        trafficVehiclePass.setTFS_ID(Bytes.toString(result.getValue(COLUMNFAMILY,TFS_ID)));
        trafficVehiclePass.setVEHICLE_STATE(Bytes.toString(result.getValue(COLUMNFAMILY,VEHICLE_STATE)));
        trafficVehiclePass.setRES_NUM1(Bytes.toString(result.getValue(COLUMNFAMILY,RES_NUM1)));
        trafficVehiclePass.setRES_NUM2(Bytes.toString(result.getValue(COLUMNFAMILY,RES_NUM2)));
        trafficVehiclePass.setRES_STR3(Bytes.toString(result.getValue(COLUMNFAMILY,RES_STR3)));
        trafficVehiclePass.setRES_STR4(Bytes.toString(result.getValue(COLUMNFAMILY,RES_STR4)));
        trafficVehiclePass.setVEHICLE_INFO_LEVEL(Bytes.toString(result.getValue(COLUMNFAMILY,VEHICLE_INFO_LEVEL)));
        trafficVehiclePass.setVEHICLE_LOGO(Bytes.toString(result.getValue(COLUMNFAMILY,VEHICLE_LOGO)));
        trafficVehiclePass.setVEHICLE_SUBLOGO(Bytes.toString(result.getValue(COLUMNFAMILY,VEHICLE_SUBLOGO)));
        trafficVehiclePass.setVEHICLE_MODEL(Bytes.toString(result.getValue(COLUMNFAMILY,VEHICLE_MODEL)));
        trafficVehiclePass.setPILOTSUNVISOR(Bytes.toString(result.getValue(COLUMNFAMILY,PILOTSUNVISOR)));
        trafficVehiclePass.setVICE_PILOTSUNVISOR(Bytes.toString(result.getValue(COLUMNFAMILY,VICE_PILOTSUNVISOR)));
        trafficVehiclePass.setUSE_PHONE(Bytes.toString(result.getValue(COLUMNFAMILY,USE_PHONE)));
        trafficVehiclePass.setVICE_PILOTSAFEBELT(Bytes.toString(result.getValue(COLUMNFAMILY,VICE_PILOTSAFEBELT)));
        trafficVehiclePass.setPENDANT_NUM(Bytes.toString(result.getValue(COLUMNFAMILY,PENDANT_NUM)));
        trafficVehiclePass.setDANGEROUS_NUM(Bytes.toString(result.getValue(COLUMNFAMILY,DANGEROUS_NUM)));
        trafficVehiclePass.setYELLOWCAR_NUM(Bytes.toString(result.getValue(COLUMNFAMILY,YELLOWCAR_NUM)));
        trafficVehiclePass.setPILOTSAFEBELT(Bytes.toString(result.getValue(COLUMNFAMILY,PILOTSAFEBELT)));
        trafficVehiclePass.setCREATETIME(Bytes.toString(result.getValue(COLUMNFAMILY,CREATETIME)));
        trafficVehiclePass.setPDVS(Bytes.toString(result.getValue(COLUMNFAMILY,PDVS)));
        trafficVehiclePass.setVEHICLE_SIGN(Bytes.toString(result.getValue(COLUMNFAMILY,VEHICLE_SIGN)));
        trafficVehiclePass.setTEMP_PLATE(Bytes.toString(result.getValue(COLUMNFAMILY,TEMP_PLATE)));
        trafficVehiclePass.setPLATE_DIFF(Bytes.toString(result.getValue(COLUMNFAMILY,PLATE_DIFF)));
        trafficVehiclePass.setVEHICLE_RECT(Bytes.toString(result.getValue(COLUMNFAMILY,VEHICLE_RECT)));
        trafficVehiclePass.setPILOT_RECT(Bytes.toString(result.getValue(COLUMNFAMILY,PILOT_RECT)));
        trafficVehiclePass.setCOPILOT_RECT(Bytes.toString(result.getValue(COLUMNFAMILY,COPILOT_RECT)));
        trafficVehiclePass.setPDVS_RECT(Bytes.toString(result.getValue(COLUMNFAMILY,PDVS_RECT)));
        trafficVehiclePass.setPLATEPOS_RECT(Bytes.toString(result.getValue(COLUMNFAMILY,PLATEPOS_RECT)));
        trafficVehiclePass.setAUDIT_STATUS(Bytes.toString(result.getValue(COLUMNFAMILY,AUDIT_STATUS)));
        trafficVehiclePass.setPLATENOENTIREBELIEVE(Bytes.toString(result.getValue(COLUMNFAMILY,PLATENOENTIREBELIEVE)));
        trafficVehiclePass.setPLATENOBELIVEDETAIL(Bytes.toString(result.getValue(COLUMNFAMILY,PLATENOBELIVEDETAIL)));
        trafficVehiclePass.setLABEL(Bytes.toString(result.getValue(COLUMNFAMILY,LABEL)));
        trafficVehiclePass.setFRONT_CHILD(Bytes.toString(result.getValue(COLUMNFAMILY,FRONT_CHILD)));
        trafficVehiclePass.setTISSUE_BOX(Bytes.toString(result.getValue(COLUMNFAMILY,TISSUE_BOX)));
        trafficVehiclePass.setDECORATION(Bytes.toString(result.getValue(COLUMNFAMILY,DECORATION)));
        trafficVehiclePass.setSIMILARITY(Bytes.toString(result.getValue(COLUMNFAMILY,SIMILARITY)));

        return trafficVehiclePass;
    }
}
